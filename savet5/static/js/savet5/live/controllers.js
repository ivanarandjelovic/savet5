// Generated by CoffeeScript 1.6.3
(function() {
  define(["angular"], function(angular) {
    var LiveCtrl;
    LiveCtrl = function($scope, $timeout, userService) {
      var connect, timeoutSeconds;
      timeoutSeconds = 5;
      connect = function() {
        var _ref;
        if (!$scope.user) {
          console.log("WS: no user, closing socket if any and returning");
          if ((_ref = $scope.websocket) != null) {
            if (typeof _ref.close === "function") {
              _ref.close();
            }
          }
          return;
        }
        console.log("Connecting to ws ...");
        $scope.websocket = new WebSocket("ws://"+document.location.hostname+":"+document.location.port+"/live/getSecured");
        $scope.websocket.onopen = function(event) {
          return $scope.$apply(function() {
            return $scope.message = "WS is open!";
          });
        };
        $scope.websocket.onmessage = function(msg) {
          return $scope.$apply(function() {
            $scope.message = msg.data;
            console.log("received ws message: " + msg.data);
            if (msg.data === "Not auth!") {
              $scope.websocket.close();
              return console.log("I have closed ws!");
            }
          });
        };
        $scope.websocket.onclose = function(event) {
          $scope.$apply(function() {
            return $scope.message = "WS closed!";
          });
          console.log("received ws closed event");
          if (!$scope.user) {
            return console.log("No re-connect scheduled, no user!");
          } else {
            console.log("Scheduling re-connect in " + timeoutSeconds + " seconds ...");
            return $timeout(connect, timeoutSeconds * 1000);
          }
        };
        $scope.websocket.onerror = function(error) {
          $scope.$apply(function() {
            return $scope.message = "WS error!";
          });
          console.log("received ws error event: " + error);
          console.log("Scheduling re-connect in " + timeoutSeconds + " seconds ...");
          return $timeout(connect, timeoutSeconds * 1000);
        };
        return $scope.send = function(msg) {
          if ($scope.websocket.readyState === 1) {
            $scope.websocket.send(msg);
            return console.log("sending websocket message: " + msg);
          } else {
            return console.log("websocket not open, not sending!: " + msg);
          }
        };
      };
      connect();
      return $scope.$watch((function() {
        return $scope.user;
      }), (function() {
        return connect();
      }));
    };
    LiveCtrl.$inject = ["$scope", "$timeout", "userService"];
    return {
      LiveCtrl: LiveCtrl
    };
  });

}).call(this);